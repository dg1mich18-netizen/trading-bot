#!/bin/bash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
LOG_DIR=".logs"
LOG_FILE="$LOG_DIR/setup.log"
mkdir -p "$LOG_DIR"

if ! touch "$LOG_FILE" 2>/dev/null; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤ $LOG_FILE. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞." >&2
    exit 1
fi

exec > >(tee -a "$LOG_FILE") 2>&1

echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Trading Bot –Ω–∞ Kubuntu..."
echo "üìú –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ $LOG_FILE"
echo "===================================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
error_exit() {
    echo "‚ùå $1" >&2
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "pyproject.toml" ]; then
    error_exit "pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
MIN_DISK_SPACE_MB=2048
FREE_SPACE=$(df -m . | tail -1 | awk '{print $4}')
if [ "$FREE_SPACE" -lt "$MIN_DISK_SPACE_MB" ]; then
    error_exit "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º $MIN_DISK_SPACE_MB MB, –¥–æ—Å—Ç—É–ø–Ω–æ $FREE_SPACE MB"
fi

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Poetry
install_poetry() {
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Poetry..."
    if ! curl -sSL https://install.python-poetry.org | python3 -; then
        error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Poetry"
    fi
    export PATH="$HOME/.local/bin:$PATH"
    echo "‚úÖ Poetry —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VSCode
install_vscode() {
    echo "üíª –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é VSCode..."
    if command -v snap &> /dev/null; then
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Snap..."
        sudo snap install --classic code || error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VSCode —á–µ—Ä–µ–∑ Snap"
    elif command -v apt &> /dev/null; then
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ APT..."
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo install -o root -g root -m 644 microsoft.gpg /usr/share/keyrings/microsoft.gpg
        sudo sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
        rm -f microsoft.gpg
        sudo apt update -qq
        sudo apt install -y code || error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VSCode —á–µ—Ä–µ–∑ APT"
    else
        error_exit "–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VSCode"
    fi
    echo "‚úÖ VSCode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π VSCode
install_vscode_extensions() {
    echo "üîå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è VSCode..."
    extensions=(
        "ms-python.python"
        "ms-python.vscode-pylance"
        "ms-toolsai.jupyter"
        "ms-azuretools.vscode-docker"
        "eamodio.gitlens"
        "usernamehw.errorlens"
        "formulahendry.auto-rename-tag"
        "bierner.color-info"
        "gruntfuggly.todo-tree"
        "ms-vscode.makefile-tools"
        "redhat.vscode-yaml"
        "ms-vscode.vscode-json"
    )

    for extension in "${extensions[@]}"; do
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é: $extension"
        if code --install-extension "$extension" --force; then
            echo "‚úÖ $extension —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $extension"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VSCode
setup_vscode() {
    echo "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é VSCode..."
    mkdir -p .vscode

    cat > .vscode/settings.json << 'EOL'
{
    "python.defaultInterpreterPath": ".venv/bin/python",
    "python.terminal.activateEnvironment": true,
    "python.analysis.autoImportCompletions": true,
    "python.analysis.typeCheckingMode": "basic",
    "python.analysis.autoSearchPaths": true,
    "python.analysis.diagnosticMode": "workspace",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.organizeImports": true
    },
    "editor.minimap.enabled": false,
    "editor.fontSize": 14,
    "editor.lineHeight": 1.5,
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 1000,
    "workbench.colorTheme": "Default Dark Modern",
    "workbench.iconTheme": "vs-seti",
    "terminal.integrated.shell.linux": "/bin/bash",
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": false,
    "python.testing.nosetestsEnabled": false,
    "[python]": {
        "editor.defaultFormatter": "ms-python.python",
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": true
        }
    }
}
EOL

    cat > .vscode/extensions.json << 'EOL'
{
    "recommendations": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter",
        "ms-azuretools.vscode-docker",
        "eamodio.gitlens",
        "usernamehw.errorlens",
        "formulahendry.auto-rename-tag",
        "bierner.color-info",
        "gruntfuggly.todo-tree",
        "ms-vscode.makefile-tools",
        "redhat.vscode-yaml",
        "ms-vscode.vscode-json"
    ]
}
EOL

    cat > .vscode/tasks.json << 'EOL'
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Install Dependencies",
            "type": "shell",
            "command": "poetry",
            "args": ["install"],
            "group": "build"
        },
        {
            "label": "Run Tests",
            "type": "shell",
            "command": "poetry",
            "args": ["run", "pytest"],
            "group": "test"
        },
        {
            "label": "Start Docker Services",
            "type": "shell",
            "command": "docker",
            "args": ["compose", "up", "-d"],
            "group": "build"
        }
    ]
}
EOL

    echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VSCode —Å–æ–∑–¥–∞–Ω—ã"
}

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
sudo apt update -qq || error_exit "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"

# ss (iproute2)
if ! command -v ss &> /dev/null; then
    echo "‚ùå ss –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é iproute2..."
    sudo apt install -y iproute2 || error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ iproute2"
fi

# Python
MIN_PYTHON_VERSION="3.8"
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
    sudo apt install -y python3 python3-venv python3-pip || error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python3"
fi

PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
if ! printf '%s\n' "$MIN_PYTHON_VERSION" "$PYTHON_VERSION" | sort -C -V; then
    error_exit "–¢—Ä–µ–±—É–µ—Ç—Å—è Python $MIN_PYTHON_VERSION –∏–ª–∏ –≤—ã—à–µ. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: $PYTHON_VERSION"
fi
echo "‚úÖ Python $PYTHON_VERSION"

# Curl
if ! command -v curl &> /dev/null; then
    echo "‚ùå curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
    sudo apt install -y curl || error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ curl"
fi

# Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
    sudo apt install -y docker.io || error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker"
    sudo systemctl enable docker
    sudo systemctl start docker
    sudo usermod -aG docker "$(whoami)"
    echo "‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'newgrp docker' –∏–ª–∏ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ Docker"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker –¥–µ–º–æ–Ω–∞
if ! systemctl is-active --quiet docker; then
    echo "üîÑ –ó–∞–ø—É—Å–∫ Docker –¥–µ–º–æ–Ω–∞..."
    sudo systemctl start docker
    sleep 2
    if ! systemctl is-active --quiet docker; then
        error_exit "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –¥–µ–º–æ–Ω"
    fi
fi

# Docker Compose
if ! docker compose version &> /dev/null; then
    echo "‚ùå Docker compose plugin –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
    sudo apt install -y docker-compose-plugin || error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose"
else
    DOCKER_COMPOSE_VERSION=$(docker compose version 2>/dev/null | awk '{print $3}' | head -1)
    echo "‚úÖ Docker Compose: $DOCKER_COMPOSE_VERSION"
fi

# Poetry
if ! command -v poetry &> /dev/null; then
    install_poetry
else
    echo "‚úÖ Poetry —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(poetry --version)"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ VSCode
if ! command -v code &> /dev/null; then
    install_vscode
fi

setup_vscode
install_vscode_extensions

echo "üéâ –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!"
echo ""
